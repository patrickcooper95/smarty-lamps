swagger: "2.0"
info:
  description: SmartyLamps API.
  version: "1.0.1"
  title: SmartyLamps API
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/"

# Paths supported by the server application
paths:
  /effects/{identifier}:
    put:
      operationId: "Effects.put"
      tags:
        - "Devices"
      summary: "Change a device's current program."
      description: "Change a device's current program."
      parameters:
        - name: identifier
          in: path
          type: string
          required: True
        - name: program
          in: body
          schema:
            type: object
            properties:
              program:
                type: string
                description: ""
      responses:
        200:
          description: Successfully modified device

  /times:
    get:
      operationId: "TimesList.get"
      tags:
        - "Times"
      summary: "Show the the list of times."
      description: "Read the list of times"
      responses:
        200:
          description: "Successful read of times list"
          schema:
            type: "string"
            items:
              properties:
                id:
                  type: "string"

  /times/{id}:
    put:
      operationId: "Times.put"
      tags:
        - "Times"
      summary: "Change a clock program's time."
      description: "Change a clock program's time."
      parameters:
        - name: id
          in: path
          type: string
          required: True
        - name: time
          in: body
          schema:
            type: object
            properties:
              time:
                type: string
                description: ""
      responses:
        200:
          description: Successfully updated time

  /devices:
    get:
      operationId: "DeviceList.get"
      tags:
        - "Devices"
      summary: "The device data structure supported by the application"
      description: "Read the list of devices"
      responses:
        200:
          description: "Successful read of device list"
          schema:
            type: "string"
            items:
              properties:
                device_name:
                  type: "string"

    post:
      operationId: "DeviceList.post"
      tags:
        - "Devices"
      summary: Create a device and add it to the list of devices
      description: Create a new device in the list of devices
      parameters:
        - name: identifier
          in: body
          description: Device to create
          required: True
          schema:
            type: object
            properties:
              identifier:
                type: string
                description: Device ID
              name:
                type: string
                description: Device name
              device_type:
                type: string
                description: Device type
              controller_gateway:
                type: string
                description: Device IP Address
              program:
                type: string
                description: Light display
      responses:
        201:
          description: Successfully created device in list

  /devices/{identifier}:
    get:
      operationId: "Device.get"
      tags:
        - "Devices"
      summary: "The device data structure supported by the application"
      description: "Return one device based on user request"
      parameters:
        - name: identifier
          in: path
          description: Device to retrieve
          type: string
          required: True
      responses:
        200:
          description: "Successful read of team list operation"
          schema:
              properties:
                identifier:
                  type: "string"
                name:
                  type: "string"
                device_type:
                  type: "string"
                controller_gateway:
                  type: "string"

    put:
      operationId: "Device.put"
      tags:
        - "Devices"
      summary: Modify a device
      description: Modify a device in the list of devices
      parameters:
        - name: identifier
          in: path
          type: string
          required: True
        - name: identifier
          in: body
          schema:
            type: object
            properties:
              identifier:
                type: string
                description: Device ID
              name:
                type: string
                description: Device name
              device_type:
                type: string
                description: Device type
              controller_gateway:
                type: string
                description: Device IP Address
              program:
                type: string
                description: Light display
      responses:
        200:
          description: Successfully modified device

    delete:
      operationId: "Device.delete"
      tags:
        - "Devices"
      summary: Delete a device
      description: Delete a device in the list of devices
      parameters:
        - name: identifier
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted device from list

  /program:
    get:
      operationId: "ProgramList.get"
      tags:
        - "Programs"
      summary: "Colors available to the devices"
      description: "Read the list of colors"
      responses:
        200:
          description: "Successful read of color list"
          schema:
            type: "string"
            items:
              properties:
                color_name:
                  type: "string"

    post:
      operationId: "ProgramList.post"
      tags:
        - "Programs"
      summary: Create a color and add it to the list of colors
      description: Create a new color in the list of color
      parameters:
        - name: name
          in: body
          description: Program to create
          required: True
          schema:
            type: object
            properties:
              name:
                type: string
                description: Program Name
                example: pulsing-magenta
              r:
                type: integer
                description: Red Value
                example: 255
              g:
                type: integer
                description: Green Value
                example: 0
              b:
                type: integer
                description: Blue Value
                example: 255
              dynamic:
                type: integer
                description: Program nature
                example: 1
              callable_path:
                type: string
                description: Path to function, if dynamic
                example: programs/pulsing_magenta.py
      responses:
        201:
          description: Successfully created color in list

  /program/{identifier}:
    delete:
      operationId: "Program.delete"
      tags:
        - "Programs"
      summary: Delete a program
      description: Delete a program from the list of programs
      parameters:
        - name: identifier
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted program.

    put:
      operationId: "Program.put"
      tags:
        - "Programs"
      summary: Update a program
      description: Update an attribute for a program
      parameters:
        - name: identifier
          in: path
          type: string
          required: True
        - name: identifier
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: Program name
              r:
                type: string
                description: Red value
              g:
                type: string
                description: Green value
              b:
                type: string
                description: Blue value
              dynamic:
                type: string
                description: Boolean (0, 1) if the program is dynamic or not
              callable_path:
                type: string
                description: Path to python callable, if dynamic
      responses:
        200:
          description: Successfully updated program.
  /subway:
    get:
      operationId: "Subway.get"
      tags:
        - "Subway"
      summary: "Subway service data from NYCT"
      description: "Get the status of trains for a particular service and route subset"
      parameters:
        - name: service
          in: body
          type: string
          required: True
        - name: segment
          in: body
          type: string
          required: True
      responses:
        200:
          description: "Successfully retrieved subway data"
          schema:
            type: "string"
            items:
              properties:
                vehicle:
                  type: "string"
